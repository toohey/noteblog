<?php 
/**
 * /
 */
class Partial_IndexController_1 extends \iMVC\Controller\BaseController
{
    public function IndexAction(){ throw new \iMVC\Exceptions\NotImplementedException; }
    /**
     * TEMPLATE
     * @responds_type <b>GET</b>, <b>POST</b>
     * @responds_to 
     * @passed_params <i>as follow</i>
     * @|-URL
     * @|-POST
     * @|-GET
     * @view_variables 
     * @redirect <i>as follow</i>
     * @|-on_success
     * @|-on_failure
     * @session_settings
     * @cookie_settings
     */
    public function Initiate()
    {
        //$this->layout->SuppressLayout();
        //$this->layout->SetLayout('foo');
        $this->view->parent = Folder::GetRoots_RootFolder();
        $this->view->pid = Folder::ROOT_PARENT;
        if(($this->view->reloading = iMVC\Tools\String::endsWith(strtolower($this->request->TYPE),".reload")))
        {
            $this->layout->  SuppressLayout();
            $this->request->TYPE = str_replace(".reload", "", strtolower($this->request->TYPE));
            if( !strlen( $this->request->TYPE))
                $this->request->TYPE = "html";
            $this->request->requestURI = str_replace(".reload", "", strtolower($this->request->requestURI));
        }
        # User::GetInstance()->setting->InitialSettings();
    }
    
    /**
     * This is a function that preforms general operations for explorer items
     * @param function $responseFunc delegate to specification task handler
     * @responds_type <b>GET</b>, <b>POST</b>
     * @responds_to <b>ANY</b>
     * @passed_params Consider a limit <b>SQL</b> syntax AKA <u>LIMIT $offset, $length</u> then params will pass <i>as follow</i>
     * @|-URL <b>l:</b> holds <i>$length</i> value in above <i>SQL</i> syntax<br /><b>o:</b> holds <i>$offset</i> value in above <i>SQL</i>
     * @note: if above params dont provided for in URL the params will automatically generated by function
     * @view_variables <i>as follow</i>
     * @|- <b>next :</b> a stdClass object which will have <b>EOQ</b>, <b>$link</b> and <b>$ajax</b> properties<br /> both are a stdClass object which conatin both <b>l</b> & <b>o</b> attribites, but with different values<br />When your are using <b>o</b> or <b>l</b> in ajax calls in your view use <b>$this->next->ajax</b> instance.<br />When your are using <b>o</b> or <b>l</b> in regular link addressing in your view use <b>$this->next->link</b> instance.<br /><b>EOQ</b> equals to End Of Query, which it means that if there are no more query according to passed <i>l</i> and <i>o</i> values or not.
     * @redirect <i>NEVER REDIRECTS BY IT SELF</i>
     */
    protected function PaginationExplorer($responseFunc)
    {
        if(!isset($this->request->params['l']))
        {
            $this->request->params['l'] = 1;
        }
        if(!isset($this->request->params['o']))
            $this->request->params['o'] = 0;
        
        $this->view->next = new stdClass();
        $this->view->next->link = new stdClass();
        $this->view->next->ajax = new stdClass();
        
        $this->view->next->link->l = $this->request->params['l'] + 1;
        $this->view->next->link->o = 0;
        
        $this->view->next->ajax->l = $this->request->params['l'] + 1;
        $this->view->next->ajax->o = $this->request->params['o'] + 1;
        
        $this->up_limit = $this->request->params['l'] * 10;
        $this->down_limit = $this->request->params['o'] * 10;
        
        call_user_func($responseFunc);
        
        if(!isset($this->view->files) || count($this->view->files)<($this->up_limit  - $this->down_limit))
            $this->view->next->EOQ = true;
        else
            $this->view->next->EOQ = false;
    }
    
    protected function Explorer($callFunction, array $args = null )
    {
        if(!isset($args))
            $args = array(User::GetInstance ()->user_id);
        
        $t = $this;
        $table = "";
        $this->  PaginationExplorer(function() use($t, &$table){
            $t->ToRespond(function($type, $t) use(&$table)
            {
                    switch ($type)
                    {
                        default:
                        case 'html':
                            $t->request->TYPE = "folders";
                        case 'folders':
                            $table = "Folder";
                            break; 
                        case 'notes':
                            $table = "Note";
                            break;
                        case 'bookmarks':
                            $table = "Bookmark";
                            break;
                        case 'attaches':
                            $table = "Attach";
                            break;
                    }
            });
        });
        $this->PaginationExplorer(function() use($t, $table, $callFunction, $args){
                $t->view->files = call_user_func_array("$table::$callFunction", 
                    array_merge($args, array($t->up_limit ,$t->down_limit)));
        });
        $this->LoadCounts($callFunction);
    }
    
    /**
     * loads count of categories of items
     * @param function that count will be based on up that
     */
    protected function LoadCounts($callfunction = "GetChildren")
    {
        $types = array('Folder', 'Note', 'Bookmark', 'Attach');
        foreach($types as $value)
        {
            if(strtolower($this->request->TYPE)!=strtolower("{$value}s"))
            {
                    $var_name = strtolower("{$value}s")."_count";
                    $this->view->$var_name = count($value::$callfunction(User::GetInstance()->user_id, $this->view->pid));
            }
        }
    }
}